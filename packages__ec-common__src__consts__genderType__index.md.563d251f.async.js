(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[104],{bDr1:function(e,n,a){"use strict";a.r(n);var s=a("q1tI"),t=a.n(s),o=a("dEAq"),r=a("H1Ra"),c=t.a.memo((e=>{e.demos;return t.a.createElement(t.a.Fragment,null,t.a.createElement("div",{className:"markdown"},t.a.createElement("h2",{id:"gendertype"},t.a.createElement(o["AnchorLink"],{to:"#gendertype","aria-hidden":"true",tabIndex:-1},t.a.createElement("span",{className:"icon icon-link"})),"genderType"),t.a.createElement("h2",{id:"code"},t.a.createElement(o["AnchorLink"],{to:"#code","aria-hidden":"true",tabIndex:-1},t.a.createElement("span",{className:"icon icon-link"})),"code"),t.a.createElement(r["a"],{code:"/** \u7537 */\nconst MALE = 1 as const;\n/** \u5973 */\nconst FEMALE = 2 as const;\n/** \u7b2c\u4e09\u6027\u522b */\nconst OTHER = 3 as const;\n/** \u7a7a */\nconst EMPTY = -1 as const;\n\nexport { MALE, FEMALE, OTHER, EMPTY };\n\nexport type SexType = 1 | 2 | 3;\n\nexport const useGenderType = () => {\n  const { formatMessage } = useIntl();\n\n  const appellativeGenderTypeMap = {\n    [MALE]: formatMessage(messages.mister),\n    [FEMALE]: formatMessage(messages.lady),\n    [OTHER]: '',\n    [EMPTY]: '',\n  };\n\n  const genderTypeMap = {\n    [MALE]: formatMessage(messages.male),\n    [FEMALE]: formatMessage(messages.female),\n    [OTHER]: formatMessage(messages.other),\n    [EMPTY]: '-',\n  };\n\n  const genderTypeList = [\n    {\n      value: MALE,\n      label: formatMessage(messages.male),\n    },\n    {\n      value: FEMALE,\n      label: formatMessage(messages.female),\n    },\n    {\n      value: OTHER,\n      label: formatMessage(messages.other),\n    },\n  ];\n\n  return { genderTypeMap, genderTypeList, appellativeGenderTypeMap };\n};",lang:"ts"})))}));n["default"]=e=>{var n=t.a.useContext(o["context"]),a=n.demos;return t.a.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o["AnchorLink"].scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),t.a.createElement(c,{demos:a})}}}]);